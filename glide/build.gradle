apply plugin: 'com.android.library'


tasks.withType(JavaCompile) {
    options.fork = true
}

dependencies {
//    api project(':third_party:gif_decoder')
//    api project(':third_party:disklrucache')
//    api project(':annotation')
//    api "androidx.fragment:fragment:${ANDROID_X_VERSION}"
//    api "androidx.vectordrawable:vectordrawable-animated:${ANDROID_X_VERSION}"
//    api "androidx.exifinterface:exifinterface:${ANDROID_X_VERSION}"
//    compileOnly "androidx.appcompat:appcompat:${ANDROID_X_VERSION}"
//
//    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
//        errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
//    }
//
//    testImplementation "androidx.appcompat:appcompat:${ANDROID_X_VERSION}"
//    testImplementation project(':testutil')
//    testImplementation 'com.google.guava:guava-testlib:18.0'
//    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
//    testImplementation "junit:junit:${JUNIT_VERSION}"
//    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
//    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
//    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
//    testImplementation "androidx.legacy:legacy-support-v4:${ANDROID_X_VERSION}"
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}
dependencies {
    api project(':third_party:gif_decoder')
    api project(':third_party:disklrucache')
    api "androidx.fragment:fragment:1.2.0"
    api "androidx.vectordrawable:vectordrawable-animated:1.0.0"
    api "androidx.exifinterface:exifinterface:1.2.0"
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

//// Used in pmd and findbugs subprojects.
//@SuppressWarnings("GroovyUnusedDeclaration")
//def classPathForQuality() {
//    return files(
//            android.bootClasspath,
//            project.configurations.compile,
//            project.android.libraryVariants.collect { it.javaCompile.classpath }
//    )
//}
//
//apply from: "${rootProject.projectDir}/scripts/upload.gradle"
